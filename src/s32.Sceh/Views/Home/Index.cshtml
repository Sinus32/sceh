@model IndexViewModel
@using s32.Sceh.Classes
@{
    ViewBag.Title = "Sceh";
}
@section topPanel
{
    @using (Html.BeginForm())
    {
        @Html.AntiForgeryToken()
        if (Model.OtherInv != null)
        {
            <div id="cardsPrice" data-card-price-service="@Url.Action("GetCardPrice")">
                <div>Price of my cards: <span id="priceOfMine">0</span>&euro;</div>
                <div>Price of other's cards: <span id="priceOfOther">0</span>&euro;</div>
                <div>
                    <button onclick="unselectAll(); return false;">Unselect all</button>
                    <button onclick="selectFromHtml(); return false;">Select cards from offer html</button>
                </div>
                <div>
                    <button onclick="filterSelected(1); return false;">My cards</button>
                    <button onclick="filterSelected(2); return false;">Normal</button>
                    <button onclick="filterSelected(3); return false;">Selected apps</button>
                    <button onclick="filterSelected(4); return false;">Selected cards</button>
                </div>
            </div>
        }

        <div class="editor-label">
            @Html.LabelFor(model => model.Input.MyProfile) @Ajax.ActionLink("Logout", "LogOut", new AjaxOptions() { HttpMethod = "POST" })
        </div>
        <div class="editor-field">
            @Html.DisplayFor(model => model.Input.MyProfile)
            @if (Model.MyInv != null)
            {
                <a href="@Html.Raw(Model.MyInv.Link)" target="_blank">@Model.MyInv.Link</a>
                <a href="@Html.Raw(Model.MyInv.Link)/badges" target="_blank">Badges</a>
                <a href="@Html.Raw(Model.MyInv.Link)/inventory" target="_blank">Inventory</a>
            }
            @Html.ValidationMessageFor(model => model.Input.MyProfile)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.Input.OtherProfile)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.Input.OtherProfile)
            @if (Model.OtherInv != null)
            {
                <a href="@Html.Raw(Model.OtherInv.Link)" target="_blank">@Model.OtherInv.Link</a>
                <a href="@Html.Raw(Model.OtherInv.Link)/badges" target="_blank">Badges</a>
                <a href="@Html.Raw(Model.OtherInv.Link)/inventory" target="_blank">Inventory</a>
            }
            @Html.ValidationMessageFor(model => model.Input.OtherProfile)
            @Html.ValidationSummary(true)
        </div>

            var list = new List<string>();
            foreach (string key in Session.Keys)
            {
                if (key.StartsWith("Result$") && (Model.OtherInv == null || key != "Result$" + Model.OtherInv.User))
                {
                    list.Add(key.Substring("Result$".Length));
                }
            }

            <p>
                <input type="submit" value="Get trade suggestions" />
                @if (list.Count > 0)
                {
                    list.Sort();
                    <select id="result_selector">
                        <option value="">Stored result:</option>
                        @foreach (var opt in list)
                        {
                            <option value="@Url.Action("Index", new { id = opt })">@opt</option>
                        }
                    </select>
                }
            </p>
    }
}
@helper SteamCard(Card card, HashSet<string> otherSet)
{
    var c = "steamCard";
    if (!otherSet.Contains(card.MarketHashName))
    {
        c += " heDontHaveIt";
    }
    else
    {
        c += " weHaveIt";
    }

    if (card.IsDuplicated)
    {
        c += " isDuplicated";
    }
    <a href="@String.Format("http://steamcommunity.com/market/listings/{0}/{1}", card.AppId, card.MarketHashName)" class="@c" data-id="@card.Id" data-app-data-app-id="@card.MarketFeeApp" data-market-hash-name="@card.MarketHashName">
        <img src="@Url.Content("~/Content/card.png")" data-original="@card.ThumbnailUrl" alt="@card.Name" title="@card.Name" />
    </a>
}
@if (Model.SteamApps != null)
{
    <div>
        Cache info: <b>@Model.ThumbnailsUsed</b> thumbnails from cache and <b>@Model.OriginalsUsed</b> original images was used.
    </div>
    <div class="allSteamApps">
        @foreach (var app in Model.SteamApps)
        {
            var c = app.Hide ? (app.MySet.Count > 0 ? "steamApp hide iHaveAny" : "steamApp hide") : "steamApp";
            <div class="@c" data-app-id="@app.Id" data-app-name="@app.Name">
                <div class="appName">
                    @app.Name (<a href="@Html.Raw(Model.MyInv.Link)/gamecards/@(app.Id)" target="_blank">Badge</a>
                    <a href="http://steamcommunity.com/app/@(app.Id)/tradingforum/" target="_blank">Trading</a>)
                </div>
                <div class="appCards">
                    <div class="myCards">
                        <div>
                            @foreach (var card in app.MyCards)
                            {
                                @SteamCard(card, app.OtherSet)
                            }
                        </div>
                    </div>
                    <div class="otherCards">
                        <div>
                            @foreach (var card in app.OtherCards)
                            {
                                @SteamCard(card, app.MySet)
                            }
                        </div>
                    </div>
                    <div class="sep"></div>
                </div>
            </div>
        }
    </div>
}